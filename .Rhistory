install.packages("igraph")
install.packages("shinythemes")
shiny::runApp('Causal-Deconvolution-of-Networks')
shiny::runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
shiny::runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
?ggplot
shiny::runApp('Causal-Deconvolution-of-Networks')
?if
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
source('~/Causal-Deconvolution-of-Networks/deconvolveterm.R', echo=TRUE)
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
runApp('Causal-Deconvolution-of-Networks')
install.packages("ggplot2")
shiny::runApp('Causal-Deconvolution-of-Networks')
library(devtools)
install.packages("devtools")
library("devtools")
devtools::create("mypackage")
library(devtools)
library('devtools')
is.null(NULL)
xor(TRUE, FALSE)
xor(FALSE, FALSE)
xor(FALSE, TRUE)
install.packages("nchar")
install.packages(nchar)
install.packages('nchar')
library(stringr)
"aaa"$alphabet
xor(FALSE, FALSE)
xor(TRUE, TRUE)
c <- 1-c(1,2,3,4,5)
c
str(c)
source('~/algodyn/R/row_shuffle.R', echo=TRUE)
A <- matrix(c(1,2,3,4,5,6,7,8,9), nrow =3, ncol=3, byrow = TRUE)
A
row_shuffle(A, 1, c(0,0,0))
install.packages("spatstat")
library("spatstat")
install.packages("imager")
library("imager")
install.packages("imager")
library(imager)
devtools::install_github("dahtah/imager")
library(devtools)
devtools::install_github("dahtah/imager")
source('~/algodyn/R/bdm2D.R', echo=TRUE)
getwd()
setwd("/home/allgebrist/algodyn")
source('~/algodyn/R/bdm2D.R', echo=TRUE)
m99 <- apply(matrix(0, 9, 9), c(1,2), function(x) sample(c(0,1),1))
block_entropy(m99, 4, 4)
library(dplyr)
library(purrr)
block_entropy(m99, 4, 4)
source('~/algodyn/R/calculate_info_symbols.R', echo=TRUE)
require(stringr)
ex_str <- "1010010111010"
calculate_info_symbols(ex_str, 12, 11, 2)
source('~/algodyn/R/bdm1D.R', echo=TRUE)
require(stringr)
ex_str <- "1010010111010"
calculate_info_symbols(ex_str, 12, 11, 2)
source('~/algodyn/R/calculate_info_symbols.R', echo=TRUE)
require(acss); require(stringr)
ex_str <- "1010010111010"
calculate_info_symbols(ex_str, 12, 11, 2)
require(igraph)
?make_graph
plot(make_graph("Coxeter"))
source('~/algodyn/R/calculate_info_edges.R', echo=TRUE)
g <- make_graph("Coxeter")
calculate_info_edges(g)
source('~/algodyn/R/bdm2D.R', echo=TRUE)
source('~/algodyn/R/calculate_info_vertices.R', echo=TRUE)
source('~/algodyn/R/calculate_info_edges.R', echo=TRUE)
calculate_info_vertices(g)
calculate_info_edges(g)
require(igraph)
coxeter_graph <- make_graph("Coxeter")
calculate_info_edges(coxeter_graph)
?make_graph
plot(make_graph("Tutte"))
tutte_graph <- make_graph("Tutte")
calculate_info_vertices(tutte_graph)
source('~/algodyn/R/relative_reprogramability.R', echo=TRUE)
source('~/algodyn/R/relative_reprogrammability.R', echo=TRUE)
relative_repgrogrammability(make_graph("Tutte"), "edges")
source('~/algodyn/R/relative_reprogrammability.R', echo=TRUE)
relative_reprogrammability(make_graph("Tutte"), "edges")
source('~/algodyn/R/info_signature.R', echo=TRUE)
relative_repgogrammability(make_graph("Tutte"), "edges")
relative_reprogrammability(make_graph("Tutte"), "edges")
?make_graph
plot(make_graph("Smallestcyclicgroup"))
relative_reprogrammability(make_graph("Smallestcyclicgroup"), "vertices")
relative_reprogrammability(make_graph("Smallestcyclicgroup"), "edges")
relative_reprogrammability(make_graph("Tutte"), "vertices")
relative_reprogrammability(make_graph("Tutte"), "edges")
median_absolute_deviation(info_signature(make_graph("Tutte"), "edges")$bdm_difference)
median_absolute_deviation(info_spectra(make_graph("Tutte"), "edges")$bdm_difference)
source('~/algodyn/R/info_spectra.R', echo=TRUE)
median_absolute_deviation(info_spectra(make_graph("Tutte"), "edges")$bdm_difference)
?make_graph
plot(make_graph("Robertson"))
relative_reprogrammability(make_graph("Robertson"), "edges")
source('~/algodyn/R/relative_reprogrammability.R', echo=TRUE)
robertson_graph <- make_graph("Robertson", 'edges')
relative_reprogrammability(robertson_graph, "edges")
robertson_graph <- make_graph("Robertson")
relative_reprogrammability(robertson_graph, 'edges')
meredith_graph = make_graph('Meredith')
plot_cutting_places(meredith_graph, 'vertices')
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
meredith_graph = make_graph('Meredith')
plot_cutting_places(meredith_graph, 'vertices')
relative_reprogrammability(robertson_graph, 'vertices')
source('~/algodyn/R/relative_reprogrammability.R', echo=TRUE)
relative_reprogrammability(robertson_graph, 'edges')
relative_reprogrammability(robertson_graph, 'vertices')
relative_reprogrammability(make_graph("Tutte"), 'edges')
source('~/algodyn/R/relative_reprogrammability.R', echo=TRUE)
source('~/algodyn/R/random_shift.R', echo=TRUE)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 22)
source('~/algodyn/R/random_shift.R', echo=TRUE)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 22)
A <- matrix(seq(1:16), nrow = 4, ncol = 4, byrow = TRUE)
random_shift(A, c(1, 3), 123)
random_shift(A, c(1, 3), 12)
random_shift(A, c(1, 3), 1)
random_shift(A, c(1, 3), 1234)
random_shift(A, c(1, 3), 12345)
random_shift(A, c(1, 3), 22)
random_shift(A, c(1, 3), 156)
random_shift(A, c(1, 3), 123)
random_shift(A, c(1, 3), 45)
A <- matrix(seq(1:100), nrow = 10, ncol = 10, byrow = TRUE)
random_shift(A, c(1, 3), 123)
random_shift(A, c(1, 3), 145)
random_shift(A, c(1, 3), 146)
random_shift(A, c(1, 3), 56)
random_shift(A, c(1, 3), 56)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 37)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 78)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 13)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 17)
x <- "hola amigo"
random_shift(x, c(2,4,6,8), 27)
random_shift(x, c(2,4,6,8), 5)
random_shift(x, c(2,4,6,8), 157)
source('~/algodyn/R/inforank.R', echo=TRUE)
inforank("ababbab")
inforank("ababbab", 2)
inforank("ababbab", base = 2)
source('~/algodyn/R/inforank.R', echo=TRUE)
inforank("ababbab", base = 2)
?make_graph
g <- make_graph("Smallestcyclicgroup")
inforank(g, 'vertices')
inforank(g, what = 'vertices')
inforank(g, what = edges)
inforank(g, what = 'edges')
A
source('~/algodyn/R/entry_shuffle.R', echo=TRUE)
entry_shuffle(A, 1, 1, 0)
?matrix
B <- matrix(seq(1:15), nrow = 5, ncol = 3, byrow = TRUE)
B
?seq
entry_shuffle(B, 2, 3, -1)
entry_shuffle(B, 3, 2, -1)
numeric(3)
B <- matrix(num(15), nrow = 5, ncol = 3, byrow = TRUE)
entry_shuffle(B, 3, 2, -1)
B <- matrix(numeric(15), nrow = 5, ncol = 3, byrow = TRUE)
entry_shuffle(B, 3, 2, -1)
?numeric
numeric(4, 1)
?lapply
lapply(B[1,], entry_shuffle, -1)
lapply(B, entry_shuffle, -1)
lapply(B, entry_shuffle, 4, 1, -1)
typeof(A)
A
random_shift(A, c(1, 3), 56)
C <- random_shift(A, c(1, 3), 56)
typeof(C)
source('~/algodyn/R/random_shift.R', echo=TRUE)
random_shift(A, c(1, 3), 56)
?make_graph
?make_full_graph
source('~/algodyn/R/info_signature.R', echo=TRUE)
t <- make_full_graph(14)
plot(t)
info_signature(t)
?make_ego_graph
?make_graph
folkman <- make_graph("Folkman")
plot(folkman)
info_signature(folkman)
length(V(folkman))
length(E(folkman))
nrow(info_signature(folkman)) == length(E(folkman))
nrow(info_signature(folkman)) - length(E(folkman))
length(E(folkman))-nrow(info_signature(folkman))
is <- info_signature(folkman, 'vertices')
is
nrow(is)
length(V(folkman))
folkman <- make_graph("Folkman")
is <- info_signature(folkman)
is
nrow(is)
typeof(is)
source('~/algodyn/R/info_spectra.R', echo=TRUE)
info_spectra(make_full_graph(5))
info_signature(make_full_graph(5), what = 'vertices')
for(i in 1:20) print(length(info_signature(make_full_graph(i), what = 'vertices')))
nrow(info_signature(make_full_graph(5), what = 'vertices'))
nrow(info_signature(make_full_graph(12), what = 'vertices'))
nrow(info_signature(make_full_graph(12)))
info_signature(make_full_graph(12), what = 'vertices')
?make_graph
frank <- make_graph("Franklin")
plot(frank)
info_spectra(frank)
info_signature(frank)
source('~/algodyn/R/info_spectra.R', echo=TRUE)
frank <- make_graph("Franklin")
info_spectra(frank, what = 'vertices')
frank <- make_graph("Franklin")
info_spectra(frank)
plot_cutting_places(frank)
plot_cutting_places(meredith)
plot_cutting_places(meredith_graph)
plot(meredith_graph)
plot(info_signature(meredith_graph)$bdm_difference, xlab = "edges sorted by max info value", ylab = "log info values",
main = "Information signature", col = "red")
plot(log(info_signature(meredith_graph)$bdm_difference), xlab = "edges sorted by max info value", ylab = "log info values", main = "Information signature", col = "red")
plot(info_signature(meredith_graph)$bdm_difference, xlab = "edges sorted by max info value", ylab = "log info values", main = "Information signature", col = "red")
plot(info_signature(make_full_graph(6))$bdm_difference, xlab = "edges sorted by max info value", ylab = "log info values", main = "Information signature", col = "red")
source('~/algodyn/R/info_signature.R', echo=TRUE)
plot(info_signature(make_full_graph(10))$bdm_difference, xlab = "edges sorted by max info value", ylab = "log info values", main = "Information signature", col = "red")
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_info_signature(make_full_graph(10))
plot_cutting_places(make_full_graph(10))
length(E(make_full_graph(10)))
plot_info_signature(make_full_graph(10))
source('~/algodyn/R/info_signature.R', echo=TRUE)
plot_info_signature(make_full_graph(10))
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_info_signature(make_full_graph(10))
plot_info_signature(make_full_graph(10), 'vertices')
plot_info_signature(meredith_graph, 'vertices')
plot_cutting_places(meredith_graph, 'vertices')
plot_info_signature(meredith_graph)
plot_cutting_places(meredith_graph)
info_signature(meredith_graph)
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_info_signature(meredith_graph)
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_info_signature(meredith_graph)
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_cutting_places(meredith_graph)
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_cutting_places(meredith_graph)
source('~/algodyn/R/plot_info_signature.R', echo=TRUE)
plot_cutting_places(meredith_graph)
install.packages("roxygen2")
library(algodyn)
library(algodyn)
--as-cran
check()
install.packages("rhub")
library(rhub)
R CMD check --as-cran
source('~/algodyn/R/bdm2D.R', echo=TRUE)
cross2
library(algodyn)
library(algodyn)
remove.packages("algodyn")
library("algodyn")
install.packages("algodyn")
install.packages("algodyn")
library(algodyn)
bdm1D("101010101", 12, 11, 2)
library(acss)
bdm1D("101010101", 12, 11, 2)

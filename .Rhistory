library("igraph")
x=1
if(x=0) {print("hola")} else if(x=1) {print("a")}
library(igraph)
delete_vertices
mmm <- c()
mmm <- df <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
mmm
str(mmm)
stop("The object should be either a graph, adjacency matrix or string.")
stop("Only characters can be removed from the string. Please leave the 'what' parameter unaltered.")
g <- graph_from_adjacency_matrix(matrix(c(0,1,1,0), nrow=2, ncol=2, byrow = TRUE))
g
plot.igraph(g)
row_shuffle <- function(x, row_position, replacement = NULL) {
if (!is.null(replacement)) {
if(length(replacement) == nrow(x)) {
x[row_position, ] <- replacement
return(x)
} else {
stop("ERROR: The inserted row should have as many columns as the matrix")
}
} else {
return(x)
}
}
row_shuffle <- function(x, row_position, replacement = NULL) {
if (!is.null(replacement)) {
if(length(replacement) == nrow(x)) {
x[row_position, ] <- replacement
return(x)
} else {
stop("ERROR: The inserted row should have as many columns as the matrix")
}
} else {
return(x)
}
}
A <- matrix( c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3,  byrow = TRUE)
A[1, ] <- c(0, 0, 0)
A
row_shuffle(A, 1, c(2,4,3))
A <- matrix( c(2, 4, 3, 1, 5, 7, 1, 1, 1), nrow=2, ncol=3,  byrow = TRUE)
A <- matrix( c(2, 4, 3, 1, 5, 7, 1, 1, 1), nrow=3, ncol=3,  byrow = TRUE)
A
row_shuffle(A, 1, c(2,4,3))
row_shuffle(A, 1, c(0,0,0))
source('~/algodyn/R/row_shuffle.R', echo=TRUE)
row_shuffle(A, 1, c(-1,0,1))
F <- row_shuffle(A, 1, c(0,0,0))
F
set.seed(123)
sample(seq(from = 0, to = 1), size = 50, replace = TRUE)
?set.seed
set.seed(22)
sample(seq(from = 0, to = 1), size = 50, replace = TRUE)
for(i in 1:20) {sample(seq(from = 0, to = 1), size = 1, replace = TRUE)}
for(i in 1:20) {set.seed(22); sample(seq(from = 0, to = 1), size = 1, replace = TRUE)}
for(i in 1:20) {print(sample(seq(from = 0, to = 1), size = 1, replace = TRUE))}
sample(x('a', 'b'), size = 50, replace = TRUE)
sample(c('a', 'b'), size = 50, replace = TRUE)
?matrix
